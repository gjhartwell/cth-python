# -*- coding: utf-8 -*-
"""
Created on Tue Apr 23 09:47:42 2019

@author: James Kring
@email:  jdk0026@auburn.edu
"""

from v3data import V3Data
import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import savgol_filter

#sxr_act = np.array([0.026524946614259193, 0.06651420914849382, 0.1384295585609152, 0.23387804137087187, 0.31059510169484383, 0.3869585174243184, 0.43121045618477183, 0.47643023685850494, 0.5051064803467398, 0.5673226909834739, 0.5488149809593779, 0.48115253184732865, 0.43423385224627964, 0.37691604185852157, 0.27492230880454827, 0.1719276662726088, 0.10141898508919667, 0.054592458969437985, 0.027681958751912816, 0.01553845093571482, 0.010842695551183112, 0.025478882580642903, 0.05616067331004615, 0.1147188962207224, 0.19071807984971656, 0.25392388413081335, 0.34052103632120634, 0.4192441135160152, 0.4711672079906748, 0.5035280095455619, 0.5181403123231121, 0.5271538981617141, 0.5306792954797857, 0.5038687680212206, 0.46632573699412205, 0.4078729161562933, 0.33740429873319044, 0.25767115967312293, 0.18722230399248474, 0.11567036829518429, 0.1022326786994654, 0.1560801772626519, 0.22311661760454626, 0.2883315401049913, 0.3468803132591347, 0.3972960243174839, 0.44097934389242255, 0.47394081752827333, 0.4798182396257289, 0.46737645035932474, 0.43916177202163453, -4.5312495594584945E-4, 0.3249256333504036, 0.22457686749532968, 0.13725081568338737, 0.08318323293821095, 0.04326066938276085, 0.021762090197441353, 0.012766043788303705, 0.0068576393732477925, 0.002799692047234523, 0.004089220548575412, 0.006458077339497985, 0.01511868602230848, 0.0408585601000766, 0.0767252430740939, 0.10611069994510558, 0.1269992295647171, 0.14648735188700357, 0.1546951421232734, 0.14980895743121891, 0.1342710537187486, 0.11531342061701366, 0.09008974613351484, 0.053015407983636464, 0.01876497234238883, 0.00678975187302349, 0.0040633495679067225, 0.0026161853050836585, 0.0014273850249403627, 6.777100127423191E-4, 0.0016041296955482398, 0.0020088145645802413, 0.0036186290985895653, 0.007903998447300609, 0.02720042125758937, 0.05786588045353369, 0.08624019809388983, 0.10552610935832263, 0.11738701913088789, 0.12375060286728967, 0.12308469199950878, 0.11532072502262736, 0.10301700460502161, 0.08753420976859161, 0.06866008087413888, 0.04781216924953924, 0.02634084784070012, 0.010767816590373513, 0.003852933002868042, 0.006666215016881694, 0.021888285202109614, 0.044275183952890984, 0.06590051943788922, 0.08630761833927636, 0.10440802011402184, 0.11805511505258437, 0.12549152579310885, 0.1251582242787208, 0.010754509932375811, 0.10800645632969008, 0.08835284414487887, 0.0642333666043271, 0.03232295427935128, 0.00911713446871687, 0.0036622038839251303, 0.0025289208962497867, 0.0018371053199794929, 0.0018311275153948259, 0.001271727901763775])
#mag_act = np.array([0.10726263025739044, 0.08539021355616055, 0.08455025482496606, 0.043726811639055646, 0.021294520772946496, -0.10051652823172465, -0.12780294261452996, 0.013604008218496135, 0.08326005492092552, 0.11458167326894066, 0.045806520122426406, -0.02587165388719594, -0.02159333789971767, 0.10335543947396754, 0.11115963204147078, 0.09182079973921149, 0.09283263725719387, 0.04365722937582123, -0.05296927102425609, -0.08312172446132098, 0.005606331840626762, 0.09714637725472261, 0.0984833158282942, 0.017556886291391655, -0.07214247318397823, -0.05160781061575339, 0.03584950016205358, 0.0896732108183756, 0.06893876685857632, 0.07779291091032448, 0.07581555360177362, -0.01499605775710897, -0.05431555460295253, 0.05925039181953855, -0.07242846748348102, -0.09995709682463837, 0.03923527258588239, 0.03501708759781575, -0.003150645372929064, -0.002573915775444792, -0.001868644446598724, -9.621759396689766E-4, -0.0025037818063290977, -0.0021348960783119982, -0.0011559814452208378, 5.006356803357332E-5, -0.13048231653364634, 0.05538791597793457, -0.02424438029979077, 0.14226353467036024, -0.06898616668214913, -0.07325600623130016, 0.04609065412784192, -0.06144138721903078, 0.13819935940500666, -0.02613687796816595, 0.1232613609306598, 0.010592329696677403])
cur_act = np.array([2091.57, 762.69, 18795.04, -0.75, 1.0, -1791.83, 7170.87, 907.10])
mag_act = np.array([0.10726263025739044, 0.08539021355616055, 0.08455025482496606, 0.043726811639055646, 0.021294520772946496, -0.10051652823172465, -0.12780294261452996, 0.013604008218496135, 0.08326005492092552, 0.11458167326894066, 0.045806520122426406, -0.02587165388719594, -0.02159333789971767, 0.10335543947396754, 0.11115963204147078, 0.09182079973921149, 0.09283263725719387, 0.04365722937582123, -0.05296927102425609, -0.08312172446132098, 0.005606331840626762, 0.09714637725472261, 0.0984833158282942, 0.017556886291391655, -0.07214247318397823, -0.05160781061575339, 0.03584950016205358, 0.0896732108183756, 0.06893876685857632, 0.07779291091032448, 0.07581555360177362, -0.01499605775710897, -0.05431555460295253, 0.05925039181953855, -0.07242846748348102, -0.09995709682463837, 0.03923527258588239, 0.03501708759781575, -0.003150645372929064, -0.002573915775444792, -0.001868644446598724, -9.621759396689766E-4, -0.0025037818063290977, -0.0021348960783119982, -0.0011559814452208378, 5.006356803357332E-5, -0.13048231653364634, 0.05538791597793457, -0.02424438029979077, 0.14226353467036024, -0.06898616668214913, -0.07325600623130016, 0.04609065412784192, -0.06144138721903078, 0.13819935940500666, -0.02613687796816595, 0.1232613609306598, 0.010592329696677403])

#mag_act2= np.array([0.10431720923298055, 0.08094762874633858, 0.08014847272512433, 0.0394933009989669, 0.017278347641221076, -0.10585773551945478, -0.13274055043977856, 0.009091465437801736, 0.07765678593152246, 0.10871290832870767, 0.038710655654398615, -0.03169938381305151, -0.025606337674607235, 0.10075348481060327, 0.1081000255474265, 0.08808460737828469, 0.09046684038627487, 0.04168233187676103, -0.05527046157486993, -0.08733512490154315, 7.291789748598266E-4, 0.09027895705206607, 0.09173712101744641, 0.010845867389035844, -0.07786271508037201, -0.056131511190779755, 0.032072777947135284, 0.08639407820153278, 0.06971449546651119, 0.07783469257884057, 0.0762902845566561, -0.014964901942654117, -0.055214807755926125, 0.058479754222902865, -0.07230176797605274, -0.09924802357946862, 0.03948723727146602, 0.03064615905684035, -0.0031898744568778165, -0.0026153681714214, -0.0018890417633255934, -9.798214424305992E-4, -0.002550005502294626, -0.002156541482752574, -0.001156421233843177, 5.9198389402607725E-5, -0.1318603040516774, 0.053356381061657514, -0.02719520073223143, 0.14459996880608014, -0.07160882079575234, -0.07655688749959065, 0.0486305977548186, -0.06636275348235678, 0.14060385114146778, -0.030715470688800813, 0.12470602137714236, 0.010258984204627395])
#sxr_act2= np.array([0.008817788922366177, 0.024400146319436544, 0.05555667920020824, 0.11346882381246814, 0.17595125706293402, 0.2233470218442335, 0.25798113497899067, 0.29601112038335486, 0.3200764377027099, 0.3637630820776394, 0.35405092094720203, 0.3110747412904402, 0.2789537789738006, 0.23526079088753704, 0.16590080571177168, 0.10488422230281458, 0.06042758855073771, 0.030517440391619743, 0.014312549639239336, 0.008008489364996763, 0.005598329057665552, 0.013772263000255691, 0.029110680220156837, 0.06110164287065345, 0.10987611810975295, 0.1531240995262806, 0.19976730558823874, 0.2582879379673386, 0.2973779467083659, 0.3219059522052703, 0.3324499809593817, 0.33654841223551557, 0.33629155572612035, 0.3167178034857443, 0.286666835933147, 0.2458219695142816, 0.19875584699491355, 0.14279916159409822, 0.09647339015828038, 0.04796220632030668, 0.046370445154764184, 0.07868595391613553, 0.12022304547798512, 0.16717131981636157, 0.20787686969470087, 0.2440316839766865, 0.2746878809887221, 0.29797010296306325, 0.30537156573018365, 0.29967342192094293, 0.28326148824930897, -4.5311091581567986E-4, 0.21321505194293877, 0.14622352664162008, 0.09263116959346007, 0.057394604446869835, 0.03146035398238212, 0.016617516971351165, 0.009420544158089683, 0.005052606573574536, 0.0012150016798346942, 0.0015600294615114585, 0.0024400912151843796, 0.0045200347660756535, 0.012794011034600317, 0.03458294729306033, 0.05852513527244696, 0.076649347911939, 0.09122851019895961, 0.09809864482335229, 0.09502434956019101, 0.08486061835313308, 0.07151213710159254, 0.05211845635066936, 0.025638035772779233, 0.00792526971369334, 0.003240848744758343, 0.0020551515613886277, 0.0011573938492037954, 6.597251859466339E-4, 2.2362461334860667E-4, 7.578925376010846E-4, 8.144304917935488E-4, 0.0016438960274145487, 0.0029995237609270475, 0.010585704568910614, 0.02966641074486631, 0.05100813142533411, 0.06518131124266802, 0.07402410277279614, 0.07842899794496816, 0.07740025143476714, 0.07149955184360124, 0.0620604780863232, 0.05021110679237495, 0.03638167132535841, 0.021024111809708756, 0.008244735096862854, 0.0033406128314705796, 0.0019102692917494224, 0.0017178112913796006, 0.005497245498364833, 0.016668745175252297, 0.03259086861362448, 0.04812159303213548, 0.061267234318762576, 0.07150227689578514, 0.07768719839873484, 0.07863597523538601, 0.006748929443300966, 0.0691878093519449, 0.05639078498020922, 0.04015914853994218, 0.017934055734691867, 0.005052591621979019, 0.0022194783794726725, 0.0016667640867495948, 0.0012824775226238927, 0.0014822640420630862, 0.0011413570507601278])
def find_closest_index(array, value):
    new_array = abs(array - value)
    try:
        index = new_array.argmin()
    except:
        print('Invalid Array')
        index = 0    
    return int(index)




def average_window(data_array, time_array, time, window):
    time = time
    ind1 = find_closest_index(time_array, time - window)
    ind2 = find_closest_index(time_array, time + window)
    
    ave_data = []
    sig_data = []
    
    for data in data_array:
        value = np.mean(data[ind1:ind2])
        sigma = np.std(data[ind1:ind2],ddof=1)
        ave_data.append(value)
        sig_data.append(sigma)
        
        
    return ave_data, sig_data



def check_sxr(shot, times, window):
    sxr = V3Data(shot).raw_sxr()
    time_data = sxr[1]
    data = sxr[0]
    
    print('SXR signals')
    print('\r\n')    

    set_ave = 50
    
    
    for time in times:
        ave_data = average_window(data, time_data, time, window)[0]
        residual = sxr_act - ave_data
        
        value = 0
        for i in range(len(residual)):
            value += (100 * abs(residual[i]/sxr_act[i]))
               
        value = value/len(residual)
        if value<set_ave:
            print('Actual time: 1.6505')
            print('Averaged time:', time)
            print('Residual Percentage:', value)
            print('\r\n')


def check_mag(shot, times, window):
    
    shot = V3Data(shot)
    shot.raw_currents()
    sxr = shot.raw_magnetics()
    time_data = sxr[1]
    data = sxr[0]
    
    print('Magnetic signals')
    print('\r\n')

        
    set_ave = 4000
    
    for time in times:
        ave_data = average_window(data, time_data, time, window)[0]
        residual = mag_act - ave_data
        
        value = 0
        
        print(mag_act[0:9])
        print(ave_data[0:9])
        #print(residual[0:9])
        
        for i in range(len(residual)):
            value += (100 * abs(residual[i]/mag_act[i]))
        
        value = value/len(residual)
        #print(value)
        if value<set_ave:
            #print('Actual time: 1.6373')
            print('Averaged time:', time)
            print('Residual Percentage:', value)
            print('\r\n')















def check_currents(shot, times, window):
    sxr = V3Data(shot).raw_currents()
    time_data = sxr[1]
    data = sxr[0][1:9]
    
    print('Current signals')
    print('\r\n')
    
    set_ave = 4000
    
    for time in times:
        ave_data = average_window(data, time_data, time, window)[0]
        #print(ave_data)
        residual = cur_act[0:8] - ave_data
        
        print(cur_act[0:8])
        print(ave_data)
        #print(residual)
        value = 0
        
        for i in range(len(residual)):
            value += (100 * abs(residual[i]/cur_act[i]))
        
        value = value/len(residual)
        if value<set_ave:
            #print('Actual time: 1.6505')
            print('Averaged time:', time)
            print('Residual Percentage:', value)
            print('\r\n')




print('Definitely the Right One')


average_window_value = 0.00005 *10
times = np.array([1.6505, 1.65051, 1.65052, 1.65053, 1.65054, 1.65055,
                 1.65049, 1.65048, 1.65047, 1.65046, 1.65045])
    
#times = [1.6505, 1.6507, 1.65023, 1.65043, 1.65044]
subtime = [1.6, 1.61, 1.605, 1.55]


times = [1.6505]
#times = [1.6373, 1.63732, 1.6374, 1.637]
#check_mag(14092626, times, average_window_value)

check_currents(14092626,times, average_window_value)
print('Currents checked')
check_mag(14092626, times, average_window_value)
print('Magnetics checked')

"""

#check_sxr(14092626, times, average_window_value)


data = np.loadtxt('PI096A.txt') * 35.501

plt.figure()
plt.plot(data, 'k')
#plt.axhline(y=0.081456,c='r')



data = np.loadtxt('PI32D.txt') *34.091

plt.figure()
plt.plot(data, 'k')
#plt.axhline(y=-0.08164,c='r')


"""










